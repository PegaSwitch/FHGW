From 1855b76e7daba3d87f52cea4c1fff4ae034ec463 Mon Sep 17 00:00:00 2001
From: Jenny Lien <Jenny_Lien@pegatroncorp.com>
Date: Thu, 27 Aug 2020 17:07:39 +0800
Subject: [PATCH 7/9] Basic PCIe test with self-generate ARP packets.

---
 .../src/appDemo/boardConfig/gtDbDxFalcon.c    |   1 +
 .../appDemo/entryPoints/linux/mfg_gemini.c    | 354 ++++++++++++++++++
 .../userExit/dxCh/appDemoDxChEventHandle.c    |  24 +-
 3 files changed, 376 insertions(+), 3 deletions(-)

diff --git a/cpssEnabler/mainSysConfig/src/appDemo/boardConfig/gtDbDxFalcon.c b/cpssEnabler/mainSysConfig/src/appDemo/boardConfig/gtDbDxFalcon.c
index c6191c55..62551531 100644
--- a/cpssEnabler/mainSysConfig/src/appDemo/boardConfig/gtDbDxFalcon.c
+++ b/cpssEnabler/mainSysConfig/src/appDemo/boardConfig/gtDbDxFalcon.c
@@ -1841,6 +1841,7 @@ static FALCON_PORT_MAP_STC falcon_6_4_Pega_defaultMap[] =
 #else    /* PEGA Jenny */
      {98            ,  1         ,   128     , CPSS_DXCH_PORT_MAPPING_TYPE_ETHERNET_MAC_E, IGNORE_DMA_STEP},
      {99            ,  1         ,   135     , CPSS_DXCH_PORT_MAPPING_TYPE_ETHERNET_MAC_E, IGNORE_DMA_STEP},
+     {CPU_PORT/*63*/,  1         ,   136/*DMA*/, CPSS_DXCH_PORT_MAPPING_TYPE_CPU_SDMA_E    ,IGNORE_DMA_STEP},
      {100           ,  1         ,   137/*DMA*/, CPSS_DXCH_PORT_MAPPING_TYPE_CPU_SDMA_E    ,IGNORE_DMA_STEP},
      {101           ,  1         ,   139/*DMA*/, CPSS_DXCH_PORT_MAPPING_TYPE_CPU_SDMA_E    ,IGNORE_DMA_STEP},
      {102           ,  1         ,   141/*DMA*/, CPSS_DXCH_PORT_MAPPING_TYPE_CPU_SDMA_E    ,IGNORE_DMA_STEP},
diff --git a/cpssEnabler/mainSysConfig/src/appDemo/entryPoints/linux/mfg_gemini.c b/cpssEnabler/mainSysConfig/src/appDemo/entryPoints/linux/mfg_gemini.c
index a96c838d..da4b1a9f 100644
--- a/cpssEnabler/mainSysConfig/src/appDemo/entryPoints/linux/mfg_gemini.c
+++ b/cpssEnabler/mainSysConfig/src/appDemo/entryPoints/linux/mfg_gemini.c
@@ -46,6 +46,7 @@
 #include <cpss/dxCh/dxChxGen/diag/cpssDxChDiag.h>
 #include <cpss/dxCh/dxChxGen/diag/cpssDxChDiagDataIntegrity.h>
 #include <cpss/dxCh/dxChxGen/diag/cpssDxChDiagPacketGenerator.h>
+#include <cpss/dxCh/dxChxGen/networkIf/cpssDxChNetIf.h>    /* Pegatron PCIe stress test add */
 #include <cpss/dxCh/dxChxGen/trunk/cpssDxChTrunk.h>
 #include <cpss/dxCh/dxChxGen/cscd/cpssDxChCscd.h>
 #include <cpss/dxCh/dxChxGen/cutThrough/cpssDxChCutThrough.h>
@@ -58,6 +59,7 @@
 #include <appDemo/sysHwConfig/gtAppDemoSysConfig.h>
 #include <appDemo/sysHwConfig/gtAppDemoSysConfigDefaults.h>
 #include <extUtils/osNetworkStack/osNetworkStack.h>
+#include <extUtils/rxEventHandler/rxEventHandler.h>       /* Pegatron PCIe stress test add */
 
 #define DEVNUM 0
 #define MAX_DEVICE_NUM 1
@@ -190,6 +192,38 @@ struct mib_counter{
     unsigned long long int pkts1519toMaxOctets[MAX_DEVICE_NUM][PORT_AMOUNT];
 };
 
+/*
+ * Variables about stress test
+ */
+
+#define STRESS_PKT_SIZE       1500 /* 64 */
+#define LOG_PCIE_STRESS_TIME  "/tmp/streeTest_Packet_CPU_time"
+#define DATE_PCIE_TRAFFIC     "date +'%Y/%m/%d %T.%N'"
+
+/* An ARP Request packet :
+ *  // header
+ *  6-byte : DA -- broadcast = FF:FF:FF:FF:FF:FF
+ *  6-byte : SA
+ *  2-byte : frame type -- ARP = 0x0806
+ *  // data
+ *  2-byte : hardware type -- ethernet = 0x0001
+ *  2-byte : protocol type -- IPv4 = 0x0800
+ *  1-byte : hardware length, MAC address length -- ethernet = 6
+ *  1-byte : protocol length -- IPv4 = 4
+ *  2-byte : operation : 1 = request ; 2 = reply
+ *  6-byte : Sender hardware address, SA in request ; or target MAC in reply
+ *  4-byte : Sender protocol address, Source IP  (ex: 192.168.1.1 == 0xC0, 0xA8, 0x01, 0x01)
+ *  6-byte : Target hardware address
+ *  4-byte : Target protocol address
+ * */
+GT_U8 stressPktBuf[STRESS_PKT_SIZE] =
+        {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x03, 0x6D, 0xF0, 0xC0, 0x00, 0x08, 0x06, 0x00, 0x01,
+         0x08, 0x00, 0x06, 0x04, 0x00, 0x01, 0x00, 0x03, 0x6D, 0xF0, 0xC0, 0x00, 0xC0, 0xA8, 0x01, 0x01,
+         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xA8, 0x01, 0x6f};
+
+unsigned long long stressGoodCnt, stressErrCnt, stressPktNumSent_perPort, stressPktNumSent, pktOrder;
+
+
 int Write_MAC_Register(off_t target, GT_U32 writeval)
 {
     prvCpssDrvHwPpPortGroupWriteRegister(0, 0, target, writeval);
@@ -2372,6 +2406,317 @@ GT_STATUS Do_Traffic_Flooding(GT_U32 time_seconds)
     return GT_OK;
 }
 
+
+/*
+ * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+ * DO NOT send any packet to the CPU during stress test
+ * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+ */
+GT_STATUS MFG_Stress_Test_Rx
+(
+    IN RX_EV_HANDLER_EV_TYPE_ENT    evType,
+    IN GT_U8                        devNum,
+    IN GT_U8                        queue,
+    IN GT_U32                       numOfBuff,
+    IN GT_U8                        *packetBuffs[],
+    IN GT_U32                       buffLen[],
+    IN GT_VOID                      *rxParamsPtr
+)
+{
+    int         i, j;
+    GT_STATUS   rc = GT_OK;
+
+    pktOrder++;
+    if ( pktOrder == 1 )
+    {
+        memset(cmd_buf, 0, sizeof(cmd_buf));
+        sprintf(cmd_buf, "echo \"  # ReceivePacketFromCPU Start time:\" |& tee -a %s", LOG_PCIE_STRESS_TIME);
+        rv_s = system(cmd_buf);
+        memset(cmd_buf, 0, sizeof(cmd_buf));
+        sprintf(cmd_buf, "%s |& tee -a %s", DATE_PCIE_TRAFFIC, LOG_PCIE_STRESS_TIME);
+        rv_s = system(cmd_buf);
+    }
+
+
+#if 0   /* Print out will cause adding test time */
+    memset(cmd_buf, 0, sizeof(cmd_buf));
+    sprintf(cmd_buf, "echo \"[PEGA dbg] packet number %d \" &>> %s", pktOrder, LOG_PCIE_STRESS_TIME);
+    rv_s = system(cmd_buf);
+#endif
+
+    for (i = 0 ; i < numOfBuff ; i++)
+    {
+#if 0   /* Print out will cause adding test time */
+        /* printf("[PEGA dbg] packet number %d\n", i); */
+        for (j = 0 ; j < buffLen[i] ; j++)
+        {
+            printf("%02X ", packetBuffs[i][j]);
+            if (j%16 == 15 || j==buffLen[i]-1)
+                printf("\n");
+        }
+#endif
+
+#if 0   /* Will make CPU busier and also reduce pps throughput */
+        /* buffLen[i]-4: the last 4 bytes are changed; it looks like CRC */
+        if (osMemCmp(packetBuffs[i], stressPktBuf, buffLen[i]-4) == 0)
+            stressGoodCnt++;
+        else
+            stressErrCnt++;
+#else
+        stressGoodCnt++;
+#endif
+    }
+
+    if (stressPktNumSent)    /* this routine handles all the received packets during stress test */
+        rc = GT_NO_MORE;
+
+    /* printf (" @ [debug] stressPktNumSent_perPort = %d , stressPktNumSent = %d \n", stressPktNumSent_perPort, stressPktNumSent); */
+
+    if ((stressGoodCnt + stressErrCnt == stressPktNumSent) || ((stressPktNumSent == 0) && (stressGoodCnt + stressErrCnt == stressPktNumSent_perPort)))
+    {
+        memset(cmd_buf, 0, sizeof(cmd_buf));
+        sprintf(cmd_buf, "echo \"  # ReceivePacketFromCPU End time:\" |& tee -a %s", LOG_PCIE_STRESS_TIME);
+        rv_s = system(cmd_buf);
+        memset(cmd_buf, 0, sizeof(cmd_buf));
+        sprintf(cmd_buf, "%s |& tee -a %s", DATE_PCIE_TRAFFIC, LOG_PCIE_STRESS_TIME);
+        rv_s = system(cmd_buf);
+
+        printf (" @ [debug] stressPktNumSent_perPort = %d , stressPktNumSent = %d \n", stressPktNumSent_perPort, stressPktNumSent);
+
+        printf("\nStress test result :\n"
+               "  Good packet count: %llu\n"
+               "  Error packet count: %llu\n\n",
+               stressGoodCnt, stressErrCnt);
+
+        /* reset data */
+        stressGoodCnt = stressErrCnt = stressPktNumSent = stressPktNumSent_perPort = pktOrder = 0;
+    }
+
+    return rc;
+}
+
+GT_STATUS MFG_Stress_Test_Tx(int portNum, GT_U32 packetNum)
+{
+    GT_U32                      counter;
+    GT_U32                      numOfBufs = 1;
+    GT_U8                       *sendPktBuffList[1];
+    GT_U32                      sendPktBuffLenList[1];
+    GT_UINTPTR                  txEventHndl;
+    GT_STATUS                   rc, tagged = GT_FALSE;
+    CPSS_DXCH_NET_TX_PARAMS_STC pcktParams;
+    CPSS_DXCH_NET_DSA_FORWARD_STC *forwardPtr;
+    GT_U16 vid = 1;
+
+    stressPktNumSent_perPort = packetNum;    /* single port target */
+
+    /* Get per port's vlanID*/
+    GT_U16 * portVID = &vid;
+    rc = cpssDxChBrgVlanPortVidGet(DEVNUM, portNum, CPSS_DIRECTION_INGRESS_E, portVID);
+    if(rc != GT_OK)
+    {
+        printf("\r\n# cpssDxChBrgVlanPortVidGet() get vlan id fail ... \r\n");
+    }
+
+    /* Enable/disable local switching back through the ingress interface for for known Unicast packets. */
+    rc = cpssDxChBrgGenUcLocalSwitchingEnable(DEVNUM, portNum, GT_TRUE);
+    if(rc != GT_OK)
+        return rc;
+
+    /* Function sets local switching of Multicast, known and unknown Unicast, and Broadcast traffic per VLAN. */
+    rc = cpssDxChBrgVlanLocalSwitchingEnableSet(DEVNUM, vid, CPSS_DXCH_BRG_VLAN_LOCAL_SWITCHING_TRAFFIC_TYPE_KNOWN_UC_E, GT_TRUE);
+    if(rc != GT_OK)
+        return rc;
+
+    /* The function enables/disables bypass of the bridge engine per port. */
+    rc = cpssDxChCscdPortBridgeBypassEnableSet(DEVNUM, portNum, GT_FALSE);
+    if(rc != GT_OK)
+        return rc;
+
+    /* in order to see FDB learning on CPU port, make additional settings
+     * API is to Enable/disable learning of new source MAC addresses for packets received on specified port.*/
+    rc = cpssDxChBrgFdbPortLearnStatusSet(DEVNUM, portNum, GT_FALSE, CPSS_LOCK_FRWRD_E);
+    if(rc != GT_OK)
+        return rc;
+
+    /*  Enables or disables forwarding of New MAC Address messages from a specificâ€ŠePort to the CPU. */
+    rc = cpssDxChBrgFdbNaToCpuPerPortSet(DEVNUM, portNum, GT_TRUE);
+    if(rc != GT_OK)
+        return rc;
+
+    /* if we use own device for srcDev arguement we don't want it to be filtered out
+     * API is to Enable/Disable filtering the ingress DSA tagged packets in which source device (Src Dev) equals to local device number. */
+    rc = cpssDxChCscdDsaSrcDevFilterSet(DEVNUM, tagged);
+    if(rc != GT_OK)
+        return rc;
+
+    osMemSet(&pcktParams, 0, sizeof(pcktParams));
+    pcktParams.cookie                               = NULL;
+    pcktParams.packetIsTagged                       = GT_FALSE;
+    pcktParams.sdmaInfo.recalcCrc                   = GT_TRUE;
+    pcktParams.sdmaInfo.txQueue                     = 7;
+    pcktParams.sdmaInfo.evReqHndl                   = txEventHndl;
+    pcktParams.sdmaInfo.invokeTxBufferQueueEvent    = GT_FALSE;
+    /* in BC2 CPU port is cascade port of 4 word type */
+    if(PRV_CPSS_DXCH_PP_HW_INFO_E_ARCH_ENABLED_MAC(0) == GT_TRUE)
+        pcktParams.dsaParam.commonParams.dsaTagType = CPSS_DXCH_NET_DSA_4_WORD_TYPE_ENT;
+    else
+        pcktParams.dsaParam.commonParams.dsaTagType = CPSS_DXCH_NET_DSA_2_WORD_TYPE_ENT;
+    pcktParams.dsaParam.commonParams.vpt            = 0;
+    pcktParams.dsaParam.commonParams.cfiBit         = 0;
+    pcktParams.dsaParam.commonParams.vid            = vid;
+    pcktParams.dsaParam.commonParams.dropOnSource   = GT_FALSE;
+    pcktParams.dsaParam.commonParams.packetIsLooped = GT_FALSE;
+    pcktParams.dsaParam.dsaType                     = CPSS_DXCH_NET_DSA_CMD_FORWARD_E;
+
+    forwardPtr = &pcktParams.dsaParam.dsaInfo.forward;
+    forwardPtr->dstInterface.type    = CPSS_INTERFACE_PORT_E;
+    forwardPtr->dstInterface.devPort.portNum  = portNum;
+    forwardPtr->dstInterface.devPort.hwDevNum = PRV_CPSS_HW_DEV_NUM_MAC(0);
+    forwardPtr->srcIsTagged          = CPSS_DXCH_BRG_VLAN_PORT_UNTAGGED_CMD_E;
+    forwardPtr->srcHwDev             = DEVNUM;
+    forwardPtr->srcIsTrunk           = GT_FALSE;
+    forwardPtr->source.portNum       = portNum;    /* CPU port 63 */
+    forwardPtr->srcId                = 0;
+    forwardPtr->egrFilterRegistered  = GT_FALSE;
+    forwardPtr->wasRouted            = GT_FALSE;
+    forwardPtr->qosProfileIndex      = 0;
+    forwardPtr->isTrgPhyPortValid    = GT_FALSE;
+    forwardPtr->dstEport             = portNum;
+    forwardPtr->tag0TpidIndex        = 0;
+    forwardPtr->origSrcPhyIsTrunk    = GT_FALSE;
+    forwardPtr->origSrcPhy.trunkId   = 0;
+    forwardPtr->origSrcPhy.portNum   = 0;
+    forwardPtr->phySrcMcFilterEnable = GT_FALSE;
+
+    sendPktBuffLenList[0] = STRESS_PKT_SIZE;
+    sendPktBuffList[0] = cpssOsCacheDmaMalloc(sendPktBuffLenList[0]*sizeof(GT_U8));
+    osMemCpy(sendPktBuffList[0], stressPktBuf, STRESS_PKT_SIZE);
+#if 0   /* Print out will cause adding test time */
+    memset(cmd_buf, 0, sizeof(cmd_buf));
+    sprintf(cmd_buf, "echo \"  # Port %d SendPacketFromCPU Start time:\" &>> %s", portNum, LOG_PCIE_STRESS_TIME);
+    rv_s = system(cmd_buf);
+    memset(cmd_buf, 0, sizeof(cmd_buf));
+    sprintf(cmd_buf, "%s &>> %s", DATE_PCIE_TRAFFIC, LOG_PCIE_STRESS_TIME);
+    rv_s = system(cmd_buf);
+#endif
+    /* ======================================================================================================================== */
+    /* cpssDxChBrgVlanIpCntlToCpuSet:
+     * Enable/disable IP control traffic trapping/mirroring to CPU.
+     *     IN GT_U8  devNum,
+     *     IN GT_U16 vlanId,
+     *     IN CPSS_DXCH_BRG_IP_CTRL_TYPE_ENT ipCntrlType
+     * */
+     /*
+      * rc = cpssDxChBrgVlanIpCntlToCpuSet(DEVNUM, 1, CPSS_DXCH_BRG_IP_CTRL_IPV4_IPV6_E);
+     if (rc != GT_OK)
+        printf(" [MFG] cpssDxChBrgVlanIpCntlToCpuSet fail , rc = %d\n", rc); */
+
+    /* cpssDxChBrgGenArpBcastToCpuCmdSet:
+     * Enables trapping or mirroring to CPU ARP Broadcast packets for all VLANs or ports.
+     *     CPSS_DXCH_ARP_BCAST_CMD_MODE_VLAN_E: set ARP broadcast command for all VLANs  <--> CPSS_DXCH_ARP_BCAST_CMD_MODE_PORT_E
+     *     CPSS_PACKET_CMD_MIRROR_TO_CPU_E:     mirror packet to CPU  <--> CPSS_PACKET_CMD_FORWARD_E , CPSS_PACKET_CMD_TRAP_TO_CPU_E
+     *
+     * For ARP broadcast received on VLAN - IPv4/IPv6 Control Traffic To CPU must be enabled by function cpssDxChBrgVlanIpCntlToCpuSet;
+     * For ARP broadcast received on port - ARP Broadcast Trap To CPU must be enabled by function cpssDxChBrgGenArpTrapEnable
+     * */
+    rc = cpssDxChBrgGenArpBcastToCpuCmdSet(DEVNUM, CPSS_DXCH_ARP_BCAST_CMD_MODE_PORT_E, CPSS_PACKET_CMD_TRAP_TO_CPU_E);
+    if (rc != GT_OK)
+        printf(" [MFG] cpssDxChBrgGenArpBcastToCpuCmdSet fail , rc = %d\n", rc);
+
+    /* cpssDxChBrgGenArpTrapEnable:
+     * Enable/disable trapping ARP Broadcast packets to the CPU.
+     *     IN GT_U8       devNum,
+     *     IN GT_PORT_NUM portNum,
+     *     IN GT_BOOL     enable : GT_TRUE  - ARP Broadcast packets received on this port are trapped to the CPU;
+     *                             GT_FALSE - ARP Broadcast packets received on this port are not trapped to the CPU.
+
+     * */
+    rc = cpssDxChBrgGenArpTrapEnable(DEVNUM, portNum, GT_TRUE);
+    if (rc != GT_OK)
+        printf(" [MFG] cpssDxChBrgGenArpTrapEnable fail , rc = %d\n", rc);
+    /* ======================================================================================================================== */
+
+    for(counter = 0 ; counter < packetNum ; counter++)
+    {
+        rc = cpssDxChNetIfSdmaSyncTxPacketSend(DEVNUM, &pcktParams, sendPktBuffList, sendPktBuffLenList, numOfBufs);
+        if(rc != GT_OK)
+        {
+            printf(" [MFG] cpssDxChNetIfSdmaSyncTxPacketSend fail , rc = %d\n", rc);
+            return rc;
+        }
+    }
+
+    cpssOsCacheDmaFree(sendPktBuffList[0]);
+#if 0   /* Print out will cause adding test time */
+    memset(cmd_buf, 0, sizeof(cmd_buf));
+    sprintf(cmd_buf, "echo \"  # Port %d SendPacketFromCPU End time:\" &>> %s", portNum, LOG_PCIE_STRESS_TIME);
+    rv_s = system(cmd_buf);
+    memset(cmd_buf, 0, sizeof(cmd_buf));
+    sprintf(cmd_buf, "%s &>> %s", DATE_PCIE_TRAFFIC, LOG_PCIE_STRESS_TIME);
+    rv_s = system(cmd_buf);
+#endif
+    return GT_OK;
+}
+
+GT_STATUS PCIe_Stress_Test_All_Ports(GT_U32 packetNum)
+{
+    int port, index, rv_qsfp_speed;
+    GT_STATUS rc;
+
+    stressGoodCnt = stressErrCnt = stressPktNumSent = stressPktNumSent_perPort = pktOrder = 0;    /* reset */
+
+    /* Remove old tmp file */
+    memset(cmd_buf, 0, sizeof(cmd_buf));
+    fd = fopen(LOG_PCIE_STRESS_TIME, "r+");
+    if( fd != NULL )
+    {
+        fclose(fd);
+        snprintf(cmd_buf, sizeof(cmd_buf), "rm %s", LOG_PCIE_STRESS_TIME);
+        rc = system(cmd_buf);
+    }
+
+    /* Make QSFP as 4 per port*/
+    QSFP_Speed_Set(1, 2);    /* 10G, if = fiber=lbm */
+    sleep(3);
+
+    /* check QSFP speed to decide how many ports */
+    rv_qsfp_speed = Read_QSFP_Speed_Note();
+    if ( rv_qsfp_speed <= 0)
+    {
+        printf(" [MFG] Get QSFP current speed setting fail ...\n");
+    }
+
+    stressPktNumSent = ( packetNum * ( SFP_MAC_PORT_END + array_index ));    /* array_index presence QSFP port amount */
+    printf("[PEGA dbg] stressPktNumSent packet number = %d\n", stressPktNumSent); /* */
+
+    /* Check Link status first */
+    rc = Check_Link_Status(LOG_PCIE_STRESS_TIME);
+    if (rc == GT_TRUE)
+    {
+        memset(cmd_buf, 0, sizeof(cmd_buf));
+        sprintf(cmd_buf, "echo \"LINK STATUS TEST RESULT: FAIL\" |& tee -a %s", LOG_PCIE_STRESS_TIME);
+        rv_s = system(cmd_buf);
+        return rc;
+    }
+
+    /* Set VLAN per port, because QSFP has no ability to send traffic ...QQ */
+    /* Vlan_Mode_Set(3); */
+
+    /* SFP */
+    for (port = SFP_MAC_PORT_START ; port <= SFP_MAC_PORT_END ; port++)
+    {
+        MFG_Stress_Test_Tx(port, packetNum);
+    }
+
+    /* QSFP */
+    for (index = 1 ; index <= array_index ; index++)
+    {
+        MFG_Stress_Test_Tx(work_ports[index], packetNum);
+    }
+
+    return GT_OK;
+}
+
 void Self_Function_Test()
 {
     Vlan_Mode_Set(2);
@@ -2466,6 +2811,15 @@ void Pre_Config_Check_And_Set(void)
 
     memset(linux_action, 0x0, sizeof(linux_action));
 
+    /* Remove old tmp file */
+    normal_param_file = fopen(FILE_SPEED_NOTE, "r+");
+    if( normal_param_file != NULL )
+    {
+        fclose(normal_param_file);
+        snprintf(linux_action, sizeof(linux_action), "rm %s", FILE_SPEED_NOTE);
+        rv_s = system(linux_action);
+    }
+
     /* Parsing Config file if exist */
     normal_param_file = fopen(FILE_NORMAL_PARAM, "r+");
     if( normal_param_file != NULL )
diff --git a/cpssEnabler/mainSysConfig/src/appDemo/userExit/dxCh/appDemoDxChEventHandle.c b/cpssEnabler/mainSysConfig/src/appDemo/userExit/dxCh/appDemoDxChEventHandle.c
index 497d45c7..b6c47842 100644
--- a/cpssEnabler/mainSysConfig/src/appDemo/userExit/dxCh/appDemoDxChEventHandle.c
+++ b/cpssEnabler/mainSysConfig/src/appDemo/userExit/dxCh/appDemoDxChEventHandle.c
@@ -130,6 +130,19 @@ GT_STATUS appDemoDxChNetRxPktHandle
     IN GT_U8                                queueIdx
 )
 {
+    /* Pegatron PCIe stress test add */
+    extern GT_STATUS MFG_Stress_Test_Rx
+    (
+         IN RX_EV_HANDLER_EV_TYPE_ENT    evType,
+         IN GT_U8                        devNum,
+         IN GT_U8                        queue,
+         IN GT_U32                       numOfBuff,
+         IN GT_U8                        *packetBuffs[],
+         IN GT_U32                       buffLen[],
+         IN GT_VOID                      *rxParamsPtr
+    );
+    /* Add End */
+
     GT_STATUS                           rc;
     GT_U32                              numOfBuff = BUFF_LEN;
     GT_U8                               *packetBuffs[BUFF_LEN];
@@ -159,9 +172,14 @@ GT_STATUS appDemoDxChNetRxPktHandle
 
     if(evHandler)
     {
-        rxEventHandlerDoCallbacks(evHandler, evType,
-            devNum,queueIdx,numOfBuff,
-            packetBuffs,buffLenArr,&rxParams);
+        /* Pegatron PCIe stress test add a case */
+        rc = MFG_Stress_Test_Rx(evType, devNum, queueIdx, numOfBuff, packetBuffs, buffLenArr, &rxParams);    /* MFG_Stress_Test_Rx function defined in mfg_gemini.c */
+        /* if these packets are not processed by MFG codes */
+        if (rc != GT_NO_MORE) {
+            rxEventHandlerDoCallbacks(evHandler, evType,
+                devNum,queueIdx,numOfBuff,
+                packetBuffs,buffLenArr,&rxParams);
+        }
     }
 
     if(appDemoPpConfigList[devNum].cpuPortMode == CPSS_NET_CPU_PORT_MODE_SDMA_E)
-- 
2.28.0

